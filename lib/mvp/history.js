/**
 * html5 history state manager, an enhanced handler for window.history
 * author  Kael Zhang
 
 * for non-html5-enabled browsers, will smoothly fallback to hashes
 * of support with:
 	- back and forward button of browsers
 	- cross browser, even with IE6,7
 	- pushState and replaceState
 	- popstate event
 	- fixed hash history of IE6,7 and old Safari
 */
 
var 

HIS = history,

need_fallback 	= !('pushState' in HIS),
HISTORY_LEGACY 	= './history-legacy',

HASH_IDENTIFIER = '#!';


var

handler,

Converter = require('./converter');

/**
 * for old browsers
 */
if(need_fallback){

	// history manager for legacy
	handler = require(HISTORY_LEGACY);
	
/**
 * standard pushState implementation
 */
}else{
	var WIN = NR.__HOST,
		HIS = WIN.history,
		
		history_state;

	handler = {
		push: function(state, title, url){
			HIS.pushState(state, title, url);
			handler.state = state;
			this.fire('pushstate', {
				state: state,
				title: title,
				url: url
			});
		},
		
		/**
		 * This is a way to look at the state without having to wait for a `popstate` event.
		 * history.state is only implemented by Gecko (up to 2012-02-27), but Webkit not yet.
		 * so create a mock property for mvp/history singleton
		 */
		// state: {Object},
		
		/**
		 * initialize
		 * @public
		 */
		start: function(){
			$(window).on('popstate', function(e){
				var state = e.event.state;
				
				handler.state = state;
				
				handler.fire('popstate', {
					state: state
				});
			});
			
			var url = NR.getLocation().href,
				index = url.indexOf(HASH_IDENTIFIER),
				hash, origin_search, state;
			
			// split hash, location.origin together with location.search
			if(index >= 0){
				hash = url.substr(index + HASH_IDENTIFIER.length);
				origin_search = url.substr(0, index);
			}else{
				hash = '';
				origin_search = url;
			}
			
			if(hash){
				state = Converter.toObject(hash);
			
				/**
				 * with a html5-pushState-enabled browser, user may visit a url which generated by mvp/history-legacy from an old browser.
				 * if happens, we replace the current history with the expected history state.
				 */
				HIS.replaceState(state, document.title, origin_search);
				handler.fire('popstate', {
					state: state
				});
			}
			
			handler.fire('start');
			handler.start = function(){};
		}
	};
	
}

// mix events methods to handler singleton
// K.Class.implement(handler, 'events');

module.exports = handler;


/**
 change log:
 
 2012-10-18  Kael:
 - migrate to Neuron 2.0, UNFINISHED!
 
 2012-02-29  Kael:
 - add initialization method to deal with hash state generated from an old browser.
 TODO:
 A. use `hashchange` event to observe the changing of location.hash.
 B. support non-tracking hash data.
 
 2012-01-02  Kael:
 - complete pushState and relevant polyfills.
 
 2011-11-18  Kael:
 - refractor and migrate to Neuron.
 - mvc/history will no longer register modules.
 - mvc/history will only deal with state-related matters.
 
 2011-04-28  Kael:
 TODO
 âˆš A. pushState 
 B. replaceState
 
 2010-01-20  Kael Zhang: create document, main functionalities
 
 */