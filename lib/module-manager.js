// Passive Mode - a very simple version of loader, which
 
// - event supported
// - No longer concern module loading or business configurations. All things could be done outside of loader.
// - No longer parse module identifier
// - No longer support anonymous module definition
// - No longer support directly define an object as module.exports
// - When user provide a module with its identifier, 
//     - loader of passive mode only register callback function which relavant to the identifier into the pending queue. 
//     - Once the module and its dependencies is defined, the callback function will execute immediately 
 
// Functionalities:

// 1. emit module-load event after module defining
// 2. provide event interface for each key sub-process

// CommonJS::Modules/Wrappings-Explicit-Dependencies    >> http://kael.me/-cmwed
// Google closure compiler advanced mode strict


// stack, config or flag for modules
var loader = {};

// map -> identifier: module
var __mods = makeSureObject(loader, 'mods');


// module define
// ---------------------------------------------------------------------------------------------------

// Method to define a module, `define` has no fault tolerance in neuron 2.0,
// because `define` method is no longer designed for human to use.
// `define` should be generated by some develop environment such as [cortex](http://ctx.io)
// @private
 
// @param {string} identifier (optional) module identifier
// @param {Array.<string>} dependencies ATTENSION! dependencies must be array of standard module identifier
//  there will be fault tolerance for argument `dependencies`. be carefull!
// @param {function(...[number])} factory
 
// @returns {undefined=}
function define(identifier, dependencies, factory){
    if(typeof identifier === 'string' && isArray(dependencies) && typeof factory === 'function' ){
        var mod = getModById(identifier);

        // a single module might be defined more than once.
        // use this trick to prevent module redefining, avoiding the subsequent side effect.
        // mod.f        -> already defined
        // mod.exports  -> the module initialization is done
        if(!mod.f && !mod.exports){
            mod.f = factory;
            
            // if has dependencies
            if ( dependencies.length ) {
                
                // ['a@0.0.1']  -> {'a' -> 'a@0.0.1'}
                generateModuleVersionMap(dependencies, mod.v);

                _provide(
                    dependencies,
                    function(){
                        generateExports(mod);
                    }, mod, true
                );
                
            }else{
                // for standalone modules, run factory immediately.
                generateExports(mod);
            }

            loader.emit('define', {
                mod: mod
            });
        }
    }
}


// 'ajax@0.0.1'
var STR_VERSION_SPLITTER = '@';

// @private
// create version info of the dependencies of current module into current sandbox
// @param {Array.<string>} modules no type detecting

// ['a@~0.1.0', 'b@~2.3.9']
// -> 
// {
//     a: '~0.1.0',
//     b: '~2.3.9'
// }
function generateModuleVersionMap(modules, host){
    modules.forEach(function(mod) {
        var name = mod.split(STR_VERSION_SPLITTER)[0];
        host[name] = mod;
    });
}


// generate the exports if the module status is 'ready'
// @param {Object} mod
function generateExports(mod){
    var exports = {};
    var module = {
            exports: exports
        };

    // clean module properties, free memory

    // to keep the object mod away from the executing context of factory,
    // use `factory` instead `mod.f`,
    // preventing user from fetching runtime data by 'this'
    var factory = mod.f;
    factory(createRequire(mod), exports, module);
    delete mod.f;

    // during the execution of `factory`, `module.exports` might be changed
    // exports:
    // TWO ways to define the exports of a module
    // 1. 
    // exports.method1 = method1;
    // exports.method2 = method2;

    // 2.
    // module.exports = {
    //        method1: method1,
    //        method2: method2
    // }

    // priority: 2 > 1
    mod.exports = module.exports;
    
    // execute pending callbacks and clean
    mod.p.forEach(function(c){
        c();
    });
    mod.p.length = 0;
    delete mod.p;

    // never delete `mod.v`, coz `require` method might be executed after module factory executed

    //      module.exports = {
    //          abc: function() {
    //              return require('b'); 
    //          }
    //      }
    
    loader.emit('ready', {
        mod: mod
    });
}


// module load
// ---------------------------------------------------------------------------------------------------

var GLOBAL_ENV = {
    v: {}
};


// method to load a module
// @public
// @param {Array.<String>} dependencies
// @param {(function(...[number]))=} callback (optional)
function provide(dependencies, callback){
    dependencies = makeArray(dependencies);
    
    _provide(dependencies, callback, GLOBAL_ENV);
}


// @private
// @param {Array.<String>} dependencies
// @param {(function(...[number]))=} callback (optional)
// @param {Object} env environment for cyclic detecting and generating the uri of child modules
//     {
//         r: {string} the uri that its child dependent modules referring to
//         n: {string} namespace of the current module
//     }
// @param {boolean=} noCallbackArgs whether callback method need arguments, for inner use
function _provide(dependencies, callback, env, noCallbackArgs){
    var counter = dependencies.length;
    var args = [];
    var cb;

    if(typeof callback === 'function'){
        cb = noCallbackArgs ?
            callback
        : 
            function(){
                callback.apply(null, args);
            };
    }

    dependencies.forEach(function(dep, i){
        if (dep) {
            var mod = getModById(dep, env);
        
            registerModLoad(mod, function(){
                if(cb){
                    -- counter;
                
                    if(!noCallbackArgs){
                        args[i] = createRequire(env)(dep);
                    }
                    
                    if(counter === 0){
                        cb();
                        args.length = 0;
                        // prevent memleak
                        cb = callback = args = null;
                    }
                }
            });
        }
    });
}


// provide 
// method to provide a module
// @private
// @param {Object} mod
// @param {function()} callback
function registerModLoad(mod, callback){
    var loaded = !!mod.exports;
    
    // if mod is ready, it will initialize its factory function
    loaded ?
        callback()
      : mod.p.push(callback);
    
    // everytime we encounter a module which is depended by the other module, `'use'` event fires 
    loader.emit('use', {
        mod: mod,

        // prevent duplicate loading
        // @type {boolean=} whether the module is already fetched, i.e. we don't need to fetch it from the remote server
        defined: loaded || !!mod.f
    });
}


// use the sandbox to specify the environment for every id that required in the current module 
// @param {Object} envMod mod
function createRequire(env){
    return function(id){
        return getModById(env.v[id] || id, env).exports;
    };
}


// Ref: [semver](http://semver.org/)
// note that we must use '\-' rather than '-', becase '-' presents a range within brackets
var REGEX_MATCH_SERVER = /^(\D*)((\d+)\.(\d+))\.(\d+)([a-z0-9\.\-+]*)(\/.*)?$/i;
//                       0  1   2 3      4       5    6               7

function parseSemver (version) {
    var ret = null;

    if ( version ) {
        ret = {
            origin: version
        };

        var match = version.match(REGEX_MATCH_SERVER);
    
        // For example
        // '~1.3.9-alpha/lang'
        if ( match ) {
            var decorator = match[1] || '~';

            // The most basic range relevant to the semantic version
            // We convert the semver to a widest range
            // -> '~1.3.0'
            ret.base = match[2] + '.0';

            // ret.major = match[3];
            // ret.minor = match[4];
            // ret.patch = match[5];

            // version.extra contains `-<pre-release>+<build>`
            ret.extra = match[6];

            // -> '~1.3.0'
            ret.range = decorator + ret.base;

            // -> '/lang'
            ret.path = match[7] || '';
        }
    }

    return ret;
}


// 'a/b' -> 'a'
// 'a' -> 'a' 
var REGEX_REMAIN_NAME = /\/\.*/i;

// get a module by id. if not exists, a ghost module(which will be filled after its first `define`) will be created
// @param {string} id
// @param {Object} env the environment module
function getModById(raw, env){
    var resolved = env ?
            // pathResolve('align', 'jquery')   -> 'jquery'
            // pathResolve('align', './')
            pathResolve(env.id, raw) :

            raw;

    var splitted = resolved.split(STR_VERSION_SPLITTER);
    var name = splitted[0];

    // '~0.1.3-alpha/inner' -> 
    // {
    //     origin: '~0.1.3-alpha/inner',
    //     decorator: '~',
    //     major: '0',
    //     minor: '1',
    //     patch: '3',
    //     extra: '-alpha',
    //     base: '0.1.0'
    //     range: '~0.1.0',
    //     path: '/inner'
    // }
    var version = parseSemver(splitted[1]);
    var pkg;
    var id;

    // 'a@0.1.9-alpha/inner'
    if ( version ) {
        // -> 'a@~0.1.0'
        pkg = name + STR_VERSION_SPLITTER + version.range;

        // -> 'a@~0.1.0/inner'
        id = pkg + version.path;

    // 'a/inner'
    } else {
        // 'a'
        pkg = name.replace(REGEX_REMAIN_NAME, '');

        // 'a/inner'
        id = name;
    }

    return __mods[id] || (__mods[id] = {
        // raw identifier that be required directly
        // raw identifier varies from time to time, so never store it
        // raw     : raw,

        // resolved and parsed id
        id      : id,

        // the package (<name>@<version>) which the current module belongs to
        pkg     : pkg,

        // package name
        name    : name,

        // package version
        version : version,
        
        // @type {Array.<function()>} pending callbacks
        p       : [],
        
        // @type {Object} version map of the current module
        v       : {}
    });
}


// module tools
// ---------------------------------------------------------------------------------------------------

// greedy match:
var REGEX_DIR_MATCHER = /.*(?=\/.*$)/;

// get the current directory from the location
//
// http://jsperf.com/regex-vs-split/2
// vs: http://jsperf.com/regex-vs-split
function dirname(uri){
    var m = uri.match(REGEX_DIR_MATCHER);

    // abc/def  -> abc
    // abc      -> abc
    // abc/     -> abc
    return m ? m[0] : uri;
}


// Canonicalize path
// similar to path.resolve() of node.js
 
// pathResolve('a/b/c') ==> 'a/b/c'
// pathResolve('a/b/../c') ==> 'a/c'
// pathResolve('a/b/./c') ==> '/a/b/c'
// pathResolve('a/b/c/') ==> 'a/b/c/'
// pathResolve('a//b/c') ==> 'a//b/c'   - for 'a//b/c' is a valid uri

function pathResolve(from, to) {
    // relative
    if(to.indexOf('./') === 0 || to.indexOf('../') === 0){
        var old = (dirname(from) + '/' + to).split('/');
        var ret = [];
            
        old.forEach(function(part){
            if (part === '..') {
                ret.pop();
                
            } else if (part !== '.') {
                ret.push(part);
            }
        });
        
        to = ret.join('/');
    }
    
    return to;
}


// @public
// ----------------------------------------------------------------------------------

// event support
// mix(loader, Event);


/**
 change log:
 
 import ./ChangeLog.md;
 
 */