/**
 * module  event-bus
 * Event bus which manages all event handlers
 
 * presenter
 */
KM.define([], function(K, require){

/**
 observe:   			-> observe and update model
 	model {mvp/model}
 
 register: 				-> update view
 	event-key {string}
 	event-handler {fn}
 	
 start:
 
 pause:
 
 _destroy:

 */

var

EventBus = K.Class({

	initialize: function(){
		K.bind('_observe', this);
		
		this._map = {};
	},

	observe: function(key, model, handler){
		var self = this,
			map = self._map,
			
			// model id is generated by K.guid, making it absolutly unique
			id = model.id;
			
		if(!map[id]){
			map[id] = {
				model: model,
				fn: handler
			};
		}
		
		model.on({
			update: this._observe,
		});
	},
	
	_observe: function(e){
		if(this.started){
			
		}
	},
	
	start: function(){
		this.started = true;
		
		return this;
	},
	
	pause: function(){
		this.started = false;
		return this;
	}
});


return EventBus;

});